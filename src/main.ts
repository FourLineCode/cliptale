import { app, BrowserWindow, Menu, Tray } from 'electron';
import { config } from './internal/config';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
	// eslint-disable-line global-require
	app.quit();
}

// Global object refs
let tray: Tray | null = null;

const createWindow = (): void => {
	// Create the browser window.
	const mainWindow = new BrowserWindow({
		show: config.window.initialShow,
		height: config.window.height,
		width: config.window.width,
		resizable: config.window.resizable,
		center: config.window.center,
		frame: config.window.frame,
		fullscreenable: config.window.fullscreenable,
		movable: config.window.movable,
		roundedCorners: config.window.rounded,
		icon: config.appIcon,
		webPreferences: {
			devTools: config.dev,
		},
	});

	// Show tray icon
	tray = new Tray(config.trayIcon);

	tray.on('click', () => {
		if (mainWindow.isVisible()) {
			mainWindow.hide();
		} else {
			mainWindow.show();
		}
	});

	const trayContextMenu = Menu.buildFromTemplate([
		{
			label: 'Open',
			click: () => {
				if (!mainWindow.isVisible()) {
					mainWindow.show();
				}
			},
		},
		{
			label: 'Close',
			click: () => {
				if (mainWindow.isVisible()) {
					mainWindow.hide();
				}
			},
		},
		{
			label: 'Toggle Devtools',
			click: () => {
				mainWindow.webContents.toggleDevTools();
			},
			visible: config.dev,
		},
		{
			label: 'Quit',
			click: () => {
				mainWindow.close();
			},
		},
	]);

	tray.setContextMenu(trayContextMenu);

	mainWindow.on('show', () => {
		// TODO: position it correctly
	});

	// Remove menubar
	mainWindow.setMenu(config.window.menu);

	// and load the index.html of the app.
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

	// Open the DevTools.
	// mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') {
		app.quit();
	}
});

app.on('activate', () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
